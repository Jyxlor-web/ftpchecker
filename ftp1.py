# -*- coding: utf-8 -*-
import base64, sys
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import hashlib

ENCRYPTED_CODE = b'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'
KEY = b'\xefnx\x8b\xf4\xe8\x10\xd99\xbe\t\xc1;\xd2&\xc4\xe9\x8b\xe8\x04SV\xac\xfa\xf2\x8d\xb8\xba\xc2\x85\x91{'
IV = b'\xf7}\x01Ab\x8d\xbe\xe6\xc0\x199\xf6\x85c|\x85'
try:
    aes_encrypted = base64.b64decode(ENCRYPTED_CODE)
    cipher = AES.new(KEY, AES.MODE_CBC, IV)
    b64_1 = unpad(cipher.decrypt(aes_encrypted), AES.block_size)
    code = base64.b64decode(b64_1)
    exec(code, globals(), locals())
except Exception as e:
    print(f'[91mEnCrypter By Jyxlor: {e}[0m')
    sys.exit(1)
